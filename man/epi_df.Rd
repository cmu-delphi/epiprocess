% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epi_df.R
\name{as_epi_df}
\alias{as_epi_df}
\alias{as_epi_df.epi_df}
\alias{as_epi_df.tbl_df}
\alias{as_epi_df.grouped_df}
\alias{as_epi_df.data.frame}
\alias{as_epi_df.tbl_ts}
\alias{is_epi_df}
\alias{new_epi_df}
\alias{epi_df}
\title{Test for \code{epi_df} format}
\usage{
as_epi_df(x, ...)

\method{as_epi_df}{epi_df}(x, ...)

\method{as_epi_df}{tbl_df}(
  x,
  geo_type = deprecated(),
  time_type = deprecated(),
  as_of,
  other_keys = character(),
  ...
)

\method{as_epi_df}{grouped_df}(x, ...)

\method{as_epi_df}{data.frame}(x, as_of, other_keys = character(), ...)

\method{as_epi_df}{tbl_ts}(x, as_of, other_keys = character(), ...)

is_epi_df(x)

new_epi_df(
  x = tibble::tibble(geo_value = character(), time_value = as.Date(integer())),
  geo_type,
  time_type,
  as_of,
  other_keys = character(),
  ...
)
}
\arguments{
\item{x}{An object.}

\item{...}{Additional arguments passed to methods.}

\item{geo_type}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} in \code{as_epi_df()}, has no
effect; the geo value type is inferred from the location column and set to
"custom" if not recognized. In \code{new_epi_df()}, should be set to the same
value that would be inferred.}

\item{time_type}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} in \code{as_epi_df()}, has no
effect: the time value type inferred from the time column and set to
"custom" if not recognized. Unpredictable behavior may result if the time
type is not recognized. In \code{new_epi_df()}, should be set to the same value
that would be inferred.}

\item{as_of}{Time value representing the time at which the given data were
available. For example, if \code{as_of} is January 31, 2022, then the \code{epi_df}
object that is created would represent the most up-to-date version of the
data available as of January 31, 2022. If the \code{as_of} argument is missing,
then the current day-time will be used.}

\item{other_keys}{If your tibble has additional keys, be sure to specify them
as a character vector here (typical examples are "age" or sub-geographies).}
}
\value{
\itemize{
\item Of \code{as_epi_df()}: an (ungrouped) \code{epi_df}
}

\itemize{
\item Of \code{is_epi_df}: \code{TRUE} if the object inherits from \code{epi_df},
otherwise \code{FALSE}.
}

\itemize{
\item Of \code{new_epi_df()}: an \code{epi_df}
}
}
\description{
One of the two main data structures for storing time series in \code{epiprocess}.
It is simply tibble with at least two columns, \code{geo_value} and \code{time_value},
that provide the keys for the time series. It can have any other columns,
which can be seen as measured variables at each key. In brief, an \code{epi_df}
represents a snapshot of an epidemiological data set at a point in time.
}
\details{
An \code{epi_df} is a tibble with (at least) the following columns:
\itemize{
\item \code{geo_value}: A character vector representing the geographical unit of
observation. This could be a country code, a state name, a county code,
etc.
\item \code{time_value}: A date or integer vector representing the time of observation.
}

Other columns can be considered as measured variables, which we also refer to
as signal variables. An \code{epi_df} object also has metadata with (at least)
the following fields:
\itemize{
\item \code{geo_type}: the type for the geo values.
\item \code{as_of}: the time value at which the given data were available.
}

Most users should use \code{as_epi_df}. The input tibble \code{x} to the constructor
must contain the columns \code{geo_value} and \code{time_value}. All other columns
will be preserved as is, and treated as measured variables. If \code{as_of} is
missing, then the function will try to guess it from an \code{as_of}, \code{issue},
or \code{version} column of \code{x} (if any of these are present), or from as an
\code{as_of} field in its metadata (stored in its attributes); if this fails,
then the current day-time will be used. The \code{new_epi_df} constructor
assumes its arguments have already been validated, so it should mainly be
used by advanced users.

Metadata for an \code{epi_df} object \code{x} can be accessed (and altered) via
\code{attributes(x)$metadata}. The first field in the above list, \code{geo_type},
can usually be inferred from the \code{geo_value} columns. They are not
currently used by any downstream functions in the \code{epiprocess} package,
and serve only as useful bits of information to convey about the data set
at hand. More information on their coding is given below.

The last field in the above list, \code{as_of}, is one of the most unique aspects
of an \code{epi_df} object. In brief, we can think of an \code{epi_df} object as a
single snapshot of a data set that contains the most up-to-date values of
the signals variables, as of the time specified in the \code{as_of} field.

If an \code{epi_df} ever loses its \code{geo_value} or \code{time_value} columns, it will
decay into a regular tibble.

A companion object is the \code{epi_archive} object, which contains the full
version history of a given data set. Revisions are common in many types of
epidemiological data streams, and paying attention to data revisions can be
important for all sorts of downstream data analysis and modeling tasks. See
the documentation for \code{\link{epi_archive}} for more details on how
data versioning works in the \code{epiprocess} package (including how to
generate \code{epi_df} objects, as data snapshots, from an \code{epi_archive}
object).
\subsection{Geo Types}{

The following geo types are recognized in an \code{epi_df}.
\itemize{
\item \code{"county"}: each observation corresponds to a U.S. county; coded by 5-digit
FIPS code.
\item \code{"hrr"}: each observation corresponds to a U.S. hospital referral region
(designed to represent regional healthcare markets); there are 306 HRRs in
the U.S; coded by number (nonconsecutive, between 1 and 457).
\item \code{"state"}: each observation corresponds to a U.S. state; coded by 2-digit
postal abbreviation (lowercase);
note that Puerto Rico is "pr" and Washington D.C. is "dc".
\item \code{"hhs"}: each observation corresponds to a U.S. HHS region; coded by number
(consecutive, between 1 and 10).
\item \code{"nation"}: each observation corresponds to a country; coded by ISO 31661-
alpha-2 country codes (lowercase).
}

An unrecognizable geo type is labeled "custom".
}

\subsection{Time Types}{

The following time types are recognized in an \code{epi_df}.
\itemize{
\item \code{"day"}: each observation corresponds to a day; coded as a \code{Date} object,
as in \code{as.Date("2022-01-31")}.
\item \code{"week"}: each observation corresponds to a week; the alignment can be
arbitrary (as to whether a week starts on a Monday, Tuesday); coded as a
\code{Date} object, representing the start date of week.
\item \code{"yearmonth"}: each observation corresponds to a month; coded as a
\code{tsibble::yearmonth} object.
\item \code{"integer"}: a generic integer index (e.g. years or something else).
}

An unrecognizable time type is labeled "custom".
}
}
\section{Functions}{
\itemize{
\item \code{as_epi_df()}: The preferred way of constructing \code{epi_df}s

\item \code{new_epi_df()}: Lower-level constructor for \code{epi_df} object

}}
\examples{
# Convert a `tsibble` that has county code as an extra key
# Notice that county code should be a character string to preserve any leading zeroes
ex1_input <- tibble::tibble(
  geo_value = c(
    "06059", "06061", "06067",
    "12111", "12113", "12117",
    "42101", "42103", "42105"
  ),
  state_name = rep(c("ca", "fl", "pa"), each = 3),
  time_value = rep(seq(as.Date("2020-06-01"), as.Date("2020-06-03"),
    by = "day"
  ), length.out = length(geo_value)),
  value = 1:length(geo_value) + 0.01 * rnorm(length(geo_value))
) \%>\%
  tsibble::as_tsibble(index = time_value, key = c(geo_value, state_name))

# The `other_keys` metadata (`"state_name"` in this case) is automatically
# inferred from the `tsibble`'s `key`:
ex1 <- as_epi_df(x = ex1_input, as_of = "2020-06-03")
attr(ex1, "metadata")[["other_keys"]]

# Dealing with misspecified column names:
# Geographical and temporal information must be provided in columns named
# `geo_value` and `time_value`; if we start from a data frame with a
# different format, it must be converted to use `geo_value` and `time_value`
# before calling `as_epi_df`.
ex2_input <- tibble::tibble(
  state = rep(c("ca", "fl", "pa"), each = 3), # misnamed
  pol = rep(c("blue", "swing", "swing"), each = 3), # extra key
  reported_date = rep(seq(as.Date("2020-06-01"), as.Date("2020-06-03"),
    by = "day"
  ), length.out = length(state)), # misnamed
  value = 1:length(state) + 0.01 * rnorm(length(state))
)
print(ex2_input)

ex2 <- ex2_input \%>\%
  dplyr::rename(geo_value = state, time_value = reported_date) \%>\%
  as_epi_df(
    as_of = "2020-06-03",
    other_keys = "pol"
  )
attr(ex2, "metadata")

# Adding additional keys to an `epi_df` object
ex3_input <- covid_incidence_county_subset \%>\%
  dplyr::filter(time_value > "2021-12-01", state_name == "Massachusetts") \%>\%
  dplyr::slice_tail(n = 6)

ex3 <- ex3_input \%>\%
  tsibble::as_tsibble() \%>\% # needed to add the additional metadata
  # add 2 extra keys
  dplyr::mutate(
    state = rep("MA", 6),
    pol = rep(c("blue", "swing", "swing"), each = 2)
  ) \%>\%
  as_epi_df(other_keys = c("state", "pol"))

attr(ex3, "metadata")

# Decays to a tibble
covid_incidence_county_subset \%>\%
  dplyr::select(-geo_value)
}
