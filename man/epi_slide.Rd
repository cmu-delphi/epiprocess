% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slide.R
\name{epi_slide}
\alias{epi_slide}
\title{Slide a function over variables in an \code{epi_df} object}
\usage{
epi_slide(
  x,
  f,
  ...,
  n = 0,
  align = c("left", "center", "right"),
  before = NULL,
  after = NULL,
  ref_time_values = NULL,
  new_col_name = NULL,
  all_rows = FALSE,
  as_list_col = deprecated(),
  names_sep = deprecated()
)
}
\arguments{
\item{x}{The \code{epi_df} object under consideration, \link[dplyr:group_by]{grouped}
or ungrouped. If ungrouped, all data in \code{x} will be treated as part of a
single data group.}

\item{f}{Function, formula, or missing; together with \code{...} specifies the
computation to slide. To "slide" means to apply a computation within a
sliding (a.k.a. "rolling") time window for each data group. The window is
determined by the \code{before} and \code{after} parameters described below. One time
step is typically one day or one week; see details for more explanation. If
a function, \code{f} must take a data frame with the same column names as
the original object, minus any grouping variables, containing the time
window data for one group-\code{ref_time_value} combination; followed by a
one-row tibble containing the values of the grouping variables for the
associated group; followed by any number of named arguments. If a formula,
\code{f} can operate directly on columns accessed via \code{.x$var} or \code{.$var}, as
in \code{~mean(.x$var)} to compute a mean of a column \code{var} for each
\code{ref_time_value}-group combination. The group key can be accessed via \code{.y}.
If \code{f} is missing, then \code{...} will specify the computation.}

\item{...}{Additional arguments to pass to the function or formula specified
via \code{f}. Alternatively, if \code{f} is missing, then the \code{...} is interpreted as
a \link[rlang:args_data_masking]{"data-masking"} expression or expressions for
tidy evaluation; in addition to referring columns directly by name, the
expressions have access to \code{.data} and \code{.env} pronouns as in \code{dplyr} verbs,
and can also refer to \code{.x}, \code{.group_key}, and \code{.ref_time_value}. See
details.}

\item{before, after}{How far \code{before} and \code{after} each \code{ref_time_value} should
the sliding window extend? At least one of these two arguments must be
provided; the other's default will be 0. The accepted values for these
depend on the type of the \code{time_value} column:
\itemize{
\item if it is a Date and the cadence is daily, then they can be integers
(which will be interpreted in units of days) or difftimes with units
"days"
\item if it is a Date and the cadence is weekly, then they must be difftimes
with units "weeks"
\item if it is an integer, then they must be integers
}

Endpoints of the window are inclusive. Common settings:
\itemize{
\item For trailing/right-aligned windows from \code{ref_time_value - k} to
\code{ref_time_value}: either pass \code{before=k} by itself, or pass \verb{before=k, after=0}.
\item For center-aligned windows from \code{ref_time_value - k} to
\code{ref_time_value + k}: pass \verb{before=k, after=k}.
\item For leading/left-aligned windows from \code{ref_time_value} to
\code{ref_time_value + k}: either pass pass \code{after=k} by itself,
or pass \verb{before=0, after=k}.
}

See "Details:" on how missing rows are handled within the window.}

\item{ref_time_values}{Time values for sliding computations, meaning, each
element of this vector serves as the reference time point for one sliding
window. If missing, then this will be set to all unique time values in the
underlying data table, by default.}

\item{new_col_name}{String indicating the name of the new column that will
contain the derivative values. The default is "slide_value" unless your
slide computations output data frames, in which case they will be unpacked
into the constituent columns and those names used. Note that setting
\code{new_col_name} equal to an existing column name will overwrite this column.}

\item{all_rows}{If \code{all_rows = TRUE}, then all rows of \code{x} will be kept in
the output even with \code{ref_time_values} provided, with some type of missing
value marker for the slide computation output column(s) for \code{time_value}s
outside \code{ref_time_values}; otherwise, there will be one row for each row in
\code{x} that had a \code{time_value} in \code{ref_time_values}. Default is \code{FALSE}. The
missing value marker is the result of \code{vctrs::vec_cast}ing \code{NA} to the type
of the slide computation output. If using \code{as_list_col = TRUE}, note that
the missing marker is a \code{NULL} entry in the list column; for certain
operations, you might want to replace these \code{NULL} entries with a different
\code{NA} marker.}

\item{as_list_col}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} if you want a list
column as output, you can now just directly output a list from your slide
computations. Usually this just means wrapping your output in a length-1
list (outputting \code{list(result)} instead of \code{result}).}

\item{names_sep}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} if you were specifying
\code{names_sep = NULL}, that's no longer needed. If you were using a non-NULL
value, you can either directly prefix your slide computation names, or
output a list and then later call \verb{tidyr::unnest(slide_output, <result_column_name>, names_sep = <names_sep>)}.}
}
\value{
An \code{epi_df} object given by appending one or more new columns to \code{x},
named according to the \code{new_col_name} argument.
}
\description{
Slides a given function over variables in an \code{epi_df} object. See the
\href{https://cmu-delphi.github.io/epiprocess/articles/slide.html}{slide vignette}
for examples.
}
\details{
To "slide" means to apply a function or formula over a rolling
window of time steps for each data group, where the window is centered at a
reference time and left and right endpoints are given by the \code{before} and
\code{after} arguments.

If there are not enough time steps available to complete the window at any
given reference time, then \code{epi_slide()} still attempts to perform the
computation anyway (it does not require a complete window). The issue of
what to do with partial computations (those run on incomplete windows) is
therefore left up to the user, either through the specified function or
formula \code{f}, or through post-processing. For a centrally-aligned slide of
\code{n} \code{time_value}s in a sliding window, set \code{before = (n-1)/2} and \code{after = (n-1)/2} when the number of \code{time_value}s in a sliding window is odd and
\code{before = n/2-1} and \code{after = n/2} when \code{n} is even.

Sometimes, we want to experiment with various trailing or leading window
widths and compare the slide outputs. In the (uncommon) case where
zero-width windows are considered, manually pass both the \code{before} and
\code{after} arguments.

If \code{f} is missing, then \link[rlang:args_data_masking]{"data-masking"}
expression(s) for tidy evaluation can be specified, for example, as in:

\if{html}{\out{<div class="sourceCode">}}\preformatted{epi_slide(x, cases_7dav = mean(cases), before = 6)
}\if{html}{\out{</div>}}

which would be equivalent to:

\if{html}{\out{<div class="sourceCode">}}\preformatted{epi_slide(x, function(x, g, t) mean(x$cases), before = 6,
          new_col_name = "cases_7dav")
}\if{html}{\out{</div>}}

In a manner similar to \code{\link[dplyr:mutate]{dplyr::mutate}}:
\itemize{
\item Expressions evaluating to length-1 vectors will be recycled to
appropriate lengths.
\item \verb{, name_var := value} can be used to set the output column name based on
a variable \code{name_var} rather than requiring you to use a hard-coded
name. (The leading comma is needed to make sure that \code{f} is treated as
missing.)
\item \verb{= NULL} can be used to remove results from previous expressions (though
we don't allow it to remove pre-existing columns).
\item \verb{, fn_returning_a_data_frame(.x)} will unpack the output of the function
into multiple columns in the result.
\item Named expressions evaluating to data frames will be placed into
\code{\link[tidyr:pack]{tidyr::pack}}ed columns.
}

In addition to \code{\link{.data}} and \code{\link{.env}}, we make some additional
"pronoun"-like bindings available:
\itemize{
\item .x, which is like \code{.x} in \code{\link[dplyr:group_map]{dplyr::group_modify}}; an ordinary object
like an \code{epi_df} rather than an rlang \link[rlang:as_data_mask]{pronoun}
like \code{\link{.data}}; this allows you to use additional {dplyr}, {tidyr}, and
{epiprocess} operations. If you have multiple expressions in \code{...}, this
won't let you refer to the output of the earlier expressions, but \code{.data}
will.
\item .group_key, which is like \code{.y} in \code{\link[dplyr:group_map]{dplyr::group_modify}}.
\item .ref_time_value, which is the element of \code{ref_time_values} that
determined the time window for the current computation.
}
}
\examples{
# slide a 7-day trailing average formula on cases
# Simple sliding means and sums are much faster to do using
# the `epi_slide_mean` and `epi_slide_sum` functions instead.
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide(cases_7dav = mean(cases), before = 6) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_7dav) \%>\%
  ungroup()

# slide a 7-day leading average
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide(cases_7dav = mean(cases), after = 6) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_7dav) \%>\%
  ungroup()

# slide a 7-day centre-aligned average
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide(cases_7dav = mean(cases), before = 3, after = 3) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_7dav) \%>\%
  ungroup()

# slide a 14-day centre-aligned average
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide(cases_14dav = mean(cases), before = 6, after = 7) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_14dav) \%>\%
  ungroup()

# nested new columns
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide(
    a = data.frame(
      cases_2dav = mean(cases),
      cases_2dma = mad(cases)
    ),
    before = 1, as_list_col = TRUE
  ) \%>\%
  ungroup()
}
\seealso{
\code{\link{epi_slide_opt}} \code{\link{epi_slide_mean}} \code{\link{epi_slide_sum}}
}
