% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{as_slide_computation}
\alias{as_slide_computation}
\alias{as_time_slide_computation}
\alias{as_diagonal_slide_computation}
\title{Generate a \verb{epi[x]_slide} computation function from a function, formula, or quosure}
\source{
This code and documentation are based on
\href{https://github.com/r-lib/rlang/blob/c55f6027928d3104ed449e591e8a225fcaf55e13/R/fn.R#L343-L427}{\code{as_function}}
from Hadley Wickham's \code{rlang} package.

Below is the original license for the \code{rlang} package.

MIT License

Copyright (c) 2020 rlang authors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Portions of the original code used in this adaptation:
\enumerate{
\item Much of the documentation and examples
\item The general flow of the function, including branching conditions
\item Error conditions and wording
\item The chunk converting a formula into a function, see
https://github.com/r-lib/rlang/blob/c55f6027928d3104ed449e591e8a225fcaf55e13/R/fn.R#L411-L418
}

Changes made include:
\enumerate{
\item Updates to documentation due to new functionality
\item The removal of function-as-string processing logic and helper arg
\code{env}
\item The addition of an output function wrapper that defines a data mask
for evaluating quosures
\item Calling an argument-checking function
\item Replacing rlang error functions with internal error functions
}
}
\usage{
as_slide_computation(
  .f,
  ...,
  .f_arg = caller_arg(.f),
  .call = caller_env(),
  .ref_time_value_long_varnames,
  .ref_time_value_label
)

as_time_slide_computation(
  .f,
  ...,
  .f_arg = caller_arg(.f),
  .call = caller_env()
)

as_diagonal_slide_computation(
  .f,
  ...,
  .f_arg = caller_arg(.f),
  .call = caller_env()
)
}
\arguments{
\item{...}{Additional arguments to pass to the function or formula
specified via \code{x}. If \code{x} is a quosure, any arguments passed via \code{...}
will be ignored.}

\item{.ref_time_value_long_varnames}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Character vector. What variable names should we allow formulas and
data-masking tidy evaluation to use to refer to \code{ref_time_value} for the
computation (in addition to \code{.z} in formulas)? E.g., \code{".ref_time_value"} or
\code{c(".ref_time_value", ".version")}.}

\item{.ref_time_value_label}{String; how to describe/label the \code{ref_time_value} in
error messages; e.g., "reference time value" or "version".}

\item{f}{A function, one-sided formula, or quosure.

If a \strong{function}, the function is returned as-is, with no
modifications.

If a \strong{formula}, e.g. \code{~ mean(.x$cases)}, it is converted to a function
with up to three arguments: \code{.x} (single argument), or \code{.x} and \code{.y}
(two arguments), or \code{.x}, \code{.y}, and \code{.z} (three arguments). The \code{.}
placeholder can be used instead of \code{.x}, \code{.group_key} can be used in
place of \code{.y}, and \code{.ref_time_value} can be used in place of \code{.z}. This
allows you to create very compact anonymous functions (lambdas) with up
to three inputs. Functions created from formulas have a special class.
Use \code{inherits(fn, "epiprocess_slide_computation")} to test for it.

If a \strong{quosure}, in the case that \code{f} was not provided to the parent
\verb{epi[x]_slide} call and the \code{...} is interpreted as an expression for
tidy evaluation, it is evaluated within a wrapper function. The wrapper
sets up object access via a data mask.}
}
\description{
\code{as_slide_computation()} transforms a one-sided formula or a
quosure into a function; functions are returned as-is or with light
modifications to calculate \code{ref_time_value}.

This code extends \code{rlang::as_function} to create functions that take three
arguments. The arguments can be accessed via the idiomatic \code{.}, \code{.x}, and
\code{.y}, extended to include \code{.z}; positional references \code{..1} and \code{..2},
extended to include \code{..3}; and also by \verb{epi[x]_slide}-specific names
\code{.group_key} and \code{.ref_time_value}.
}
\keyword{internal}
