% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slide.R
\name{epi_slide_mean}
\alias{epi_slide_mean}
\title{Optimized slide function for performing rolling averages on an \code{epi_df} object}
\usage{
epi_slide_mean(
  x,
  col_names,
  ...,
  before = NULL,
  after = NULL,
  ref_time_values = NULL,
  new_col_name = NULL,
  all_rows = FALSE,
  as_list_col = deprecated(),
  names_sep = NULL
)
}
\arguments{
\item{x}{The \code{epi_df} object under consideration, \link[dplyr:group_by]{grouped}
or ungrouped. If ungrouped, all data in \code{x} will be treated as part of a
single data group.}

\item{col_names}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> An unquoted column
name(e.g., \code{cases}), multiple column names (e.g., \code{c(cases, deaths)}),
\link[tidyselect:language]{other tidy-select expression}, or a vector of
characters (e.g. \code{c("cases", "deaths")}). Variable names can be used as if
they were positions in the data frame, so expressions like \code{x:y} can be
used to select a range of variables.

The tidy-selection renaming interface is not supported, and cannot be used
to provide output column names; if you want to customize the output column
names, use \code{\link[dplyr:rename]{dplyr::rename}} after the slide.}

\item{...}{Additional arguments to pass to \code{data.table::frollmean}, for
example, \code{na.rm} and \code{algo}. \code{data.table::frollmean} is automatically
passed the data \code{x} to operate on, the window size \code{n}, and the alignment
\code{align}. Providing these args via \code{...} will cause an error.}

\item{before, after}{Deprecated. Use \code{.n} instead.}

\item{new_col_name}{Not supported. Included to match \code{epi_slide} interface.}

\item{as_list_col}{Not supported. Included to match \code{epi_slide} interface.}

\item{names_sep}{Not supported. Included to match \code{epi_slide} interface.}

\item{.window_size}{The size of the sliding window. By default, this is 0,
meaning that only the current ref_time_value is included. The accepted values
here depend on the \code{time_value} column:
\itemize{
\item if time_type is Date and the cadence is daily, then \code{.n} can be an integer
(which will be interpreted in units of days) or a difftime with units
"days"
\item if time_type is Date and the cadence is weekly, then \code{.n} must be a difftime
with units "weeks"
\item if time_type is an integer, then \code{.n} must be an integer
}}

\item{.align}{The alignment of the sliding window. If \code{right} (default), then
the window has its end at the reference time; if \code{center}, then the window is
centered at the reference time; if \code{left}, then the window has its start at
the reference time. If the alignment is \code{center} and the window size is odd,
then the window will have floor(window_size/2) points before and after the
reference time. If the window size is even, then the window will be
asymmetric and have one less value on the right side of the reference time.}

\item{.ref_time_values}{Time values for sliding computations, meaning, each
element of this vector serves as the reference time point for one sliding
window. If missing, then this will be set to all unique time values in the
underlying data table, by default.}

\item{.all_rows}{If \code{all_rows = TRUE}, then all rows of \code{x} will be kept in
the output even with \code{ref_time_values} provided, with some type of missing
value marker for the slide computation output column(s) for \code{time_value}s
outside \code{ref_time_values}; otherwise, there will be one row for each row in
\code{x} that had a \code{time_value} in \code{ref_time_values}. Default is \code{FALSE}. The
missing value marker is the result of \code{vctrs::vec_cast}ing \code{NA} to the type
of the slide computation output. If using \code{as_list_col = TRUE}, note that
the missing marker is a \code{NULL} entry in the list column; for certain
operations, you might want to replace these \code{NULL} entries with a different
\code{NA} marker.}
}
\value{
An \code{epi_df} object given by appending one or more new columns to \code{x},
named according to the \code{new_col_name} argument.
}
\description{
Slides an n-timestep mean over variables in an \code{epi_df} object. See the \href{https://cmu-delphi.github.io/epiprocess/articles/slide.html}{slide vignette} for
examples.
}
\details{
Wrapper around \code{epi_slide_opt} with \code{f = datatable::frollmean}.

To "slide" means to apply a function over a rolling window of time
steps for each data group, where the window is centered at a reference time
and left and right endpoints are given by the \code{before} and \code{after}
arguments.
If there are not enough time steps available to complete the window at any
given reference time, then \verb{epi_slide_*()} will fail; it requires a
complete window to perform the computation. For a centrally-aligned slide
of \code{n} \code{time_value}s in a sliding window, set \code{before = (n-1)/2} and \code{after = (n-1)/2} when the number of \code{time_value}s in a sliding window is odd and
\code{before = n/2-1} and \code{after = n/2} when \code{n} is even.

Sometimes, we want to experiment with various trailing or leading window
widths and compare the slide outputs. In the (uncommon) case where
zero-width windows are considered, manually pass both the \code{before} and
\code{after} arguments.
}
\examples{
# slide a 7-day trailing average formula on cases
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean(cases, before = 6) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_7dav = slide_value_cases) \%>\%
  ungroup()

# slide a 7-day trailing average formula on cases. Adjust `frollmean` settings for speed
# and accuracy, and to allow partially-missing windows.
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean(
    cases,
    before = 6,
    # `frollmean` options
    na.rm = TRUE, algo = "exact", hasNA = TRUE
  ) \%>\%
  dplyr::select(geo_value, time_value, cases, cases_7dav = slide_value_cases) \%>\%
  ungroup()

# slide a 7-day leading average
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean(cases, after = 6) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_7dav = slide_value_cases) \%>\%
  ungroup()

# slide a 7-day centre-aligned average
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean(cases, before = 3, after = 3) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_7dav = slide_value_cases) \%>\%
  ungroup()

# slide a 14-day centre-aligned average
jhu_csse_daily_subset \%>\%
  group_by(geo_value) \%>\%
  epi_slide_mean(cases, before = 6, after = 7) \%>\%
  # Remove a nonessential var. to ensure new col is printed
  dplyr::select(geo_value, time_value, cases, cases_14dav = slide_value_cases) \%>\%
  ungroup()
}
\seealso{
\code{\link{epi_slide}} \code{\link{epi_slide_opt}} \code{\link{epi_slide_sum}}
}
