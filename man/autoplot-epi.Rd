% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autoplot.R
\name{autoplot-epi}
\alias{autoplot-epi}
\alias{autoplot.epi_df}
\alias{autoplot.epi_archive}
\alias{plot.epi_df}
\alias{plot.epi_archive}
\title{Automatically plot an epi_df or epi_archive}
\usage{
\method{autoplot}{epi_df}(
  object,
  ...,
  .color_by = c("all_keys", "geo_value", "other_keys", ".response", "all", "none"),
  .facet_by = c(".response", "other_keys", "all_keys", "geo_value", "all", "none"),
  .base_color = "#3A448F",
  .facet_filter = NULL,
  .max_facets = deprecated()
)

\method{autoplot}{epi_archive}(
  object,
  ...,
  .base_color = "black",
  .versions = NULL,
  .mark_versions = FALSE,
  .facet_filter = NULL
)

\method{plot}{epi_df}(x, ...)

\method{plot}{epi_archive}(x, ...)
}
\arguments{
\item{object, x}{An \code{epi_df} or \code{epi_archive}}

\item{...}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> One or more unquoted
expressions separated by commas. Variable names can be used as if they
were positions in the data frame, so expressions like \code{x:y} can
be used to select a range of variables.}

\item{.color_by}{Which variables should determine the color(s) used to plot
lines. Options include:
\itemize{
\item \code{all_keys} - the default uses the interaction of any key variables
including the \code{geo_value}
\item \code{geo_value} - \code{geo_value} only
\item \code{other_keys} - any available keys that are not \code{geo_value}
\item \code{.response} - the numeric variables (same as the y-axis)
\item \code{all} - uses the interaction of all keys and numeric variables
\item \code{none} - no coloring aesthetic is applied
}}

\item{.facet_by}{Similar to \code{.color_by} except that the default is to display
each numeric variable on a separate facet}

\item{.base_color}{Lines will be shown with this color if \code{.color_by == "none"}.
For example, with a single numeric variable and faceting by \code{geo_value}, all
locations would share the same color line.}

\item{.facet_filter}{Select which facets will be displayed. Especially
useful for when there are many \code{geo_value}'s or keys. This is a
<\code{\link[=args_data_masking]{rlang}}> expression along the lines of \code{\link[dplyr:filter]{dplyr::filter()}}.
However, it must be a single expression combined with the \code{&} operator. This
contrasts to the typical use case which allows multiple comma-separated expressions
which are implicitly combined with \code{&}. When multiple variables are selected
with \code{...}, their names can be filtered in combination with other factors
by using \code{.response_name}. See the examples below.}

\item{.max_facets}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}}

\item{.versions}{Select which versions will be displayed. By default,
a separate line will be shown with the data as it would have appeared on
every day in the archive. This can sometimes become overwhelming. For
example, daily data would display a line for what the data would have looked
like on every single day. To override this, you can select specific dates,
by passing a vector of values here. Alternatively, a sequence can be
automatically created by passing a string like \code{"2 weeks"} or \code{"month"}.
For time types where the \code{time_value} is a date object, any string that
is interpretable by \code{\link[base:seq.Date]{base::seq.Date()}} is allowed.

For \code{time_type = "integer"}, an integer larger than 1 will give a subset
of versions.}

\item{.mark_versions}{Logical. Indicate whether to mark each version with
a vertical line. Note that displaying many versions can become busy.}
}
\value{
A \link[ggplot2:ggplot]{ggplot2::ggplot} object
}
\description{
Automatically plot an epi_df or epi_archive
}
\examples{
# -- Use it on an `epi_df`
autoplot(cases_deaths_subset, cases, death_rate_7d_av)
autoplot(cases_deaths_subset, case_rate_7d_av, .facet_by = "geo_value")
autoplot(cases_deaths_subset, case_rate_7d_av,
  .color_by = "none",
  .facet_by = "geo_value"
)
autoplot(cases_deaths_subset, case_rate_7d_av,
  .color_by = "none",
  .base_color = "red", .facet_by = "geo_value"
)

# .base_color specification won't have any effect due .color_by default
autoplot(cases_deaths_subset, case_rate_7d_av,
  .base_color = "red", .facet_by = "geo_value"
)

# filter to only some facets, must be explicitly combined
autoplot(cases_deaths_subset, cases, death_rate_7d_av,
  .facet_by = "all",
  .facet_filter = (.response_name == "cases" & geo_value \%in\% c("tx", "pa")) |
    (.response_name == "death_rate_7d_av" &
      geo_value \%in\% c("ca", "fl", "ga", "ny"))
)
# Just an alias for convenience
plot(cases_deaths_subset, cases, death_rate_7d_av,
  .facet_by = "all",
  .facet_filter = (.response_name == "cases" & geo_value \%in\% c("tx", "pa")) |
    (.response_name == "death_rate_7d_av" &
      geo_value \%in\% c("ca", "fl", "ga", "ny"))
)

# -- Use it on an archive

autoplot(archive_cases_dv_subset, percent_cli, .versions = "week")
autoplot(archive_cases_dv_subset_all_states, percent_cli,
  .versions = "week",
  .facet_filter = geo_value \%in\% c("or", "az", "vt", "ms")
)
autoplot(archive_cases_dv_subset, percent_cli,
  .versions = "month",
  .facet_filter = geo_value == "ca"
)
autoplot(archive_cases_dv_subset_all_states, percent_cli,
  .versions = "1 month",
  .facet_filter = geo_value \%in\% c("or", "az", "vt", "ms"),
  .mark_versions = TRUE
)
# Just an alias for convenience
plot(archive_cases_dv_subset_all_states, percent_cli,
  .versions = "1 month",
  .facet_filter = geo_value \%in\% c("or", "az", "vt", "ms"),
  .mark_versions = TRUE
)
}
